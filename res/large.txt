Classfile /C:/Users/Fleur/Documents/workspace/JVM/res/ObjectOutputStream.class
  Last modified May 29, 2013; size 17475 bytes
  MD5 checksum 7835820fa6e4caf99ac9eef9debf5dba
  Compiled from "ObjectOutputStream.java"
public class java.io.ObjectOutputStream extends java.io.OutputStream implements java.io.ObjectOutput,java.io.ObjectStreamConstants
  SourceFile: "ObjectOutputStream.java"
  InnerClasses:
       static #292; //class java/io/ObjectOutputStream$1
       public static abstract #678= #297 of #291; //PutField=class java/io/ObjectOutputStream$PutField of class java/io/ObjectOutputStream
       static #674= #301 of #300; //ClassDataSlot=class java/io/ObjectStreamClass$ClassDataSlot of class java/io/ObjectStreamClass
       static #681= #302 of #300; //WeakClassKey=class java/io/ObjectStreamClass$WeakClassKey of class java/io/ObjectStreamClass
  minor version: 0
  major version: 51
  flags: ACC_PUBLIC, ACC_SUPER
Constant pool:
    #1 = Integer            8257536
    #2 = Float              3.0f
    #3 = String             #24           //  
    #4 = String             #25           //  \n
    #5 = String             #26           //  \")
    #6 = String             #27           //  \", 
    #7 = String             #28           //  \", name: \"
    #8 = String             #29           //  \", size: 
    #9 = String             #30           //  \", type: \"
   #10 = String             #58           //  )
   #11 = String             #95           //  array (class \"
   #12 = String             #107          //  custom writeObject data (class \"
   #13 = String             #116          //  element of array (index: 
   #14 = String             #121          //  field (class \"
   #15 = String             #201          //  no current PutField object
   #16 = String             #202          //  not in call to writeObject
   #17 = String             #203          //  object (class \"
   #18 = String             #213          //  root 
   #19 = String             #217          //  stream active
   #20 = String             #218          //  stream non-empty
   #21 = String             #222          //  sun.io.serialization.extendedDebugInfo
   #22 = String             #225          //  unknown version: 
   #23 = String             #244          //  writeExternal data
   #24 = Utf8               
   #25 = Utf8               \n
   #26 = Utf8               \")
   #27 = Utf8               \", 
   #28 = Utf8               \", name: \"
   #29 = Utf8               \", size: 
   #30 = Utf8               \", type: \"
   #31 = Utf8               ()I
   #32 = Utf8               ()Ljava/lang/String;
   #33 = Utf8               ()V
   #34 = Utf8               ()Z
   #35 = Utf8               (D)V
   #36 = Utf8               (F)V
   #37 = Utf8               (I)V
   #38 = Utf8               (IF)V
   #39 = Utf8               (J)V
   #40 = Utf8               (Ljava/lang/Object;)I
   #41 = Utf8               (Ljava/lang/Object;)V
   #42 = Utf8               (Ljava/lang/String;)V
   #43 = Utf8               (Ljava/lang/String;Z)V
   #44 = Utf8               (Z)V
   #45 = Utf8               (Z)Z
   #46 = Utf8               ([B)V
   #47 = Utf8               ([BII)V
   #48 = Utf8               ([BIIZ)V
   #49 = Utf8               ([CII)V
   #50 = Utf8               ([DII)V
   #51 = Utf8               ([DI[BII)V
   #52 = Utf8               ([FII)V
   #53 = Utf8               ([FI[BII)V
   #54 = Utf8               ([III)V
   #55 = Utf8               ([JII)V
   #56 = Utf8               ([SII)V
   #57 = Utf8               ([ZII)V
   #58 = Utf8               )
   #59 = Utf8               <clinit>
   #60 = Utf8               <init>
   #61 = Utf8               Code
   #62 = Utf8               Exceptions
   #63 = Utf8               I
   #64 = Utf8               InnerClasses
   #65 = Utf8               LineNumberTable
   #66 = Utf8               Ljava/lang/Class;
   #67 = Utf8               SUBCLASS_IMPLEMENTATION_PERMISSION
   #68 = Utf8               SUBSTITUTION_PERMISSION
   #69 = Utf8               Signature
   #70 = Utf8               SourceFile
   #71 = Utf8               StackMapTable
   #72 = Utf8               TYPE
   #73 = Utf8               Z
   #74 = Utf8               [B
   #75 = Utf8               [C
   #76 = Utf8               [D
   #77 = Utf8               [F
   #78 = Utf8               [I
   #79 = Utf8               [J
   #80 = Utf8               [Ljava/io/ObjectStreamClass$ClassDataSlot;
   #81 = Utf8               [Ljava/io/ObjectStreamField;
   #82 = Utf8               [Ljava/lang/Class;
   #83 = Utf8               [Ljava/lang/Object;
   #84 = Utf8               [S
   #85 = Utf8               [Z
   #86 = Utf8               access$000
   #87 = Utf8               access$100
   #88 = Utf8               access$200
   #89 = Utf8               access$300
   #90 = Utf8               access$400
   #91 = Utf8               access$500
   #92 = Utf8               annotateClass
   #93 = Utf8               annotateProxyClass
   #94 = Utf8               append
   #95 = Utf8               array (class \"
   #96 = Utf8               assign
   #97 = Utf8               auditSubclass
   #98 = Utf8               booleanValue
   #99 = Utf8               bout
  #100 = Utf8               checkDefaultSerialize
  #101 = Utf8               checkPermission
  #102 = Utf8               checkSerialize
  #103 = Utf8               clear
  #104 = Utf8               close
  #105 = Utf8               curContext
  #106 = Utf8               curPut
  #107 = Utf8               custom writeObject data (class \"
  #108 = Utf8               debugInfoStack
  #109 = Utf8               defaultWriteFields
  #110 = Utf8               defaultWriteObject
  #111 = Utf8               depth
  #112 = Utf8               desc
  #113 = Utf8               doPrivileged
  #114 = Utf8               doublesToBytes
  #115 = Utf8               drain
  #116 = Utf8               element of array (index: 
  #117 = Utf8               enableOverride
  #118 = Utf8               enableReplace
  #119 = Utf8               enableReplaceObject
  #120 = Utf8               extendedDebugInfo
  #121 = Utf8               field (class \"
  #122 = Utf8               floatsToBytes
  #123 = Utf8               flush
  #124 = Utf8               forClass
  #125 = Utf8               get
  #126 = Utf8               getClass
  #127 = Utf8               getClassDataLayout
  #128 = Utf8               getComponentType
  #129 = Utf8               getDesc
  #130 = Utf8               getFields
  #131 = Utf8               getInterfaces
  #132 = Utf8               getName
  #133 = Utf8               getNumObjFields
  #134 = Utf8               getObj
  #135 = Utf8               getObjFieldValues
  #136 = Utf8               getPrimDataSize
  #137 = Utf8               getPrimFieldValues
  #138 = Utf8               getProtocolVersion
  #139 = Utf8               getSecurityManager
  #140 = Utf8               getSuperDesc
  #141 = Utf8               getType
  #142 = Utf8               getUTFLength
  #143 = Utf8               handles
  #144 = Utf8               hasWriteObjectMethod
  #145 = Utf8               hasWriteReplaceMethod
  #146 = Utf8               invokeWriteObject
  #147 = Utf8               invokeWriteReplace
  #148 = Utf8               isArray
  #149 = Utf8               isExternalizable
  #150 = Utf8               isPrimitive
  #151 = Utf8               isProxy
  #152 = Utf8               isUnshared
  #153 = Utf8               java/io/Externalizable
  #154 = Utf8               java/io/IOException
  #155 = Utf8               java/io/NotActiveException
  #156 = Utf8               java/io/NotSerializableException
  #157 = Utf8               java/io/ObjectOutput
  #158 = Utf8               java/io/ObjectOutputStream
  #159 = Utf8               java/io/ObjectOutputStream$1
  #160 = Utf8               java/io/ObjectOutputStream$BlockDataOutputStream
  #161 = Utf8               java/io/ObjectOutputStream$Caches
  #162 = Utf8               java/io/ObjectOutputStream$DebugTraceInfoStack
  #163 = Utf8               java/io/ObjectOutputStream$HandleTable
  #164 = Utf8               java/io/ObjectOutputStream$PutField
  #165 = Utf8               java/io/ObjectOutputStream$PutFieldImpl
  #166 = Utf8               java/io/ObjectOutputStream$ReplaceTable
  #167 = Utf8               java/io/ObjectStreamClass
  #168 = Utf8               java/io/ObjectStreamClass$ClassDataSlot
  #169 = Utf8               java/io/ObjectStreamClass$WeakClassKey
  #170 = Utf8               java/io/ObjectStreamConstants
  #171 = Utf8               java/io/ObjectStreamField
  #172 = Utf8               java/io/OutputStream
  #173 = Utf8               java/io/SerialCallbackContext
  #174 = Utf8               java/io/Serializable
  #175 = Utf8               java/lang/Boolean
  #176 = Utf8               java/lang/Byte
  #177 = Utf8               java/lang/Character
  #178 = Utf8               java/lang/Class
  #179 = Utf8               java/lang/Double
  #180 = Utf8               java/lang/Enum
  #181 = Utf8               java/lang/Float
  #182 = Utf8               java/lang/IllegalArgumentException
  #183 = Utf8               java/lang/IllegalStateException
  #184 = Utf8               java/lang/IndexOutOfBoundsException
  #185 = Utf8               java/lang/Integer
  #186 = Utf8               java/lang/InternalError
  #187 = Utf8               java/lang/Long
  #188 = Utf8               java/lang/NullPointerException
  #189 = Utf8               java/lang/Object
  #190 = Utf8               java/lang/SecurityException
  #191 = Utf8               java/lang/SecurityManager
  #192 = Utf8               java/lang/Short
  #193 = Utf8               java/lang/String
  #194 = Utf8               java/lang/StringBuilder
  #195 = Utf8               java/lang/System
  #196 = Utf8               java/lang/Throwable
  #197 = Utf8               java/security/AccessController
  #198 = Utf8               java/util/concurrent/ConcurrentMap
  #199 = Utf8               lookup
  #200 = Utf8               name
  #201 = Utf8               no current PutField object
  #202 = Utf8               not in call to writeObject
  #203 = Utf8               object (class \"
  #204 = Utf8               pop
  #205 = Utf8               primVals
  #206 = Utf8               processQueue
  #207 = Utf8               protocol
  #208 = Utf8               push
  #209 = Utf8               putFields
  #210 = Utf8               putIfAbsent
  #211 = Utf8               replaceObject
  #212 = Utf8               reset
  #213 = Utf8               root 
  #214 = Utf8               setBlockDataMode
  #215 = Utf8               setUsed
  #216 = Utf8               size
  #217 = Utf8               stream active
  #218 = Utf8               stream non-empty
  #219 = Utf8               subclassAudits
  #220 = Utf8               subclassAuditsQueue
  #221 = Utf8               subs
  #222 = Utf8               sun.io.serialization.extendedDebugInfo
  #223 = Utf8               sun/security/action/GetBooleanAction
  #224 = Utf8               toString
  #225 = Utf8               unknown version: 
  #226 = Utf8               useProtocolVersion
  #227 = Utf8               valueOf
  #228 = Utf8               verifySubclass
  #229 = Utf8               write
  #230 = Utf8               writeArray
  #231 = Utf8               writeBoolean
  #232 = Utf8               writeBooleans
  #233 = Utf8               writeByte
  #234 = Utf8               writeBytes
  #235 = Utf8               writeChar
  #236 = Utf8               writeChars
  #237 = Utf8               writeClass
  #238 = Utf8               writeClassDesc
  #239 = Utf8               writeClassDescriptor
  #240 = Utf8               writeDouble
  #241 = Utf8               writeDoubles
  #242 = Utf8               writeEnum
  #243 = Utf8               writeExternal
  #244 = Utf8               writeExternal data
  #245 = Utf8               writeExternalData
  #246 = Utf8               writeFatalException
  #247 = Utf8               writeFields
  #248 = Utf8               writeFloat
  #249 = Utf8               writeFloats
  #250 = Utf8               writeHandle
  #251 = Utf8               writeInt
  #252 = Utf8               writeInts
  #253 = Utf8               writeLong
  #254 = Utf8               writeLongUTF
  #255 = Utf8               writeLongs
  #256 = Utf8               writeNonProxy
  #257 = Utf8               writeNonProxyDesc
  #258 = Utf8               writeNull
  #259 = Utf8               writeObject
  #260 = Utf8               writeObject0
  #261 = Utf8               writeObjectOverride
  #262 = Utf8               writeOrdinaryObject
  #263 = Utf8               writeProxyDesc
  #264 = Utf8               writeSerialData
  #265 = Utf8               writeShort
  #266 = Utf8               writeShorts
  #267 = Utf8               writeStreamHeader
  #268 = Utf8               writeString
  #269 = Utf8               writeTypeString
  #270 = Utf8               writeUTF
  #271 = Utf8               writeUnshared
  #272 = Long               65535l
  #274 = Class              #74           //  "[B"
  #275 = Class              #75           //  "[C"
  #276 = Class              #76           //  "[D"
  #277 = Class              #77           //  "[F"
  #278 = Class              #78           //  "[I"
  #279 = Class              #79           //  "[J"
  #280 = Class              #80           //  "[Ljava/io/ObjectStreamClass$ClassDataSlot;"
  #281 = Class              #81           //  "[Ljava/io/ObjectStreamField;"
  #282 = Class              #82           //  "[Ljava/lang/Class;"
  #283 = Class              #83           //  "[Ljava/lang/Object;"
  #284 = Class              #84           //  "[S"
  #285 = Class              #85           //  "[Z"
  #286 = Class              #153          //  java/io/Externalizable
  #287 = Class              #154          //  java/io/IOException
  #288 = Class              #155          //  java/io/NotActiveException
  #289 = Class              #156          //  java/io/NotSerializableException
  #290 = Class              #157          //  java/io/ObjectOutput
  #291 = Class              #158          //  java/io/ObjectOutputStream
  #292 = Class              #159          //  java/io/ObjectOutputStream$1
  #293 = Class              #160          //  java/io/ObjectOutputStream$BlockDataOutputStream
  #294 = Class              #161          //  java/io/ObjectOutputStream$Caches
  #295 = Class              #162          //  java/io/ObjectOutputStream$DebugTraceInfoStack
  #296 = Class              #163          //  java/io/ObjectOutputStream$HandleTable
  #297 = Class              #164          //  java/io/ObjectOutputStream$PutField
  #298 = Class              #165          //  java/io/ObjectOutputStream$PutFieldImpl
  #299 = Class              #166          //  java/io/ObjectOutputStream$ReplaceTable
  #300 = Class              #167          //  java/io/ObjectStreamClass
  #301 = Class              #168          //  java/io/ObjectStreamClass$ClassDataSlot
  #302 = Class              #169          //  java/io/ObjectStreamClass$WeakClassKey
  #303 = Class              #170          //  java/io/ObjectStreamConstants
  #304 = Class              #171          //  java/io/ObjectStreamField
  #305 = Class              #172          //  java/io/OutputStream
  #306 = Class              #173          //  java/io/SerialCallbackContext
  #307 = Class              #174          //  java/io/Serializable
  #308 = Class              #175          //  java/lang/Boolean
  #309 = Class              #176          //  java/lang/Byte
  #310 = Class              #177          //  java/lang/Character
  #311 = Class              #178          //  java/lang/Class
  #312 = Class              #179          //  java/lang/Double
  #313 = Class              #180          //  java/lang/Enum
  #314 = Class              #181          //  java/lang/Float
  #315 = Class              #182          //  java/lang/IllegalArgumentException
  #316 = Class              #183          //  java/lang/IllegalStateException
  #317 = Class              #184          //  java/lang/IndexOutOfBoundsException
  #318 = Class              #185          //  java/lang/Integer
  #319 = Class              #186          //  java/lang/InternalError
  #320 = Class              #187          //  java/lang/Long
  #321 = Class              #188          //  java/lang/NullPointerException
  #322 = Class              #189          //  java/lang/Object
  #323 = Class              #190          //  java/lang/SecurityException
  #324 = Class              #191          //  java/lang/SecurityManager
  #325 = Class              #192          //  java/lang/Short
  #326 = Class              #193          //  java/lang/String
  #327 = Class              #194          //  java/lang/StringBuilder
  #328 = Class              #195          //  java/lang/System
  #329 = Class              #196          //  java/lang/Throwable
  #330 = Class              #197          //  java/security/AccessController
  #331 = Class              #198          //  java/util/concurrent/ConcurrentMap
  #332 = Class              #223          //  sun/security/action/GetBooleanAction
  #333 = Utf8               Ljava/io/ObjectOutputStream$BlockDataOutputStream;
  #334 = Utf8               Ljava/io/ObjectOutputStream$DebugTraceInfoStack;
  #335 = Utf8               Ljava/io/ObjectOutputStream$HandleTable;
  #336 = Utf8               Ljava/io/ObjectOutputStream$PutFieldImpl;
  #337 = Utf8               Ljava/io/ObjectOutputStream$ReplaceTable;
  #338 = Utf8               Ljava/io/ObjectStreamClass;
  #339 = Utf8               Ljava/io/SerialCallbackContext;
  #340 = Utf8               Ljava/io/SerializablePermission;
  #341 = Utf8               Ljava/lang/ref/ReferenceQueue;
  #342 = Utf8               Ljava/util/concurrent/ConcurrentMap;
  #343 = Utf8               (Ljava/io/Externalizable;)V
  #344 = Utf8               (Ljava/io/IOException;)V
  #345 = Utf8               (Ljava/io/ObjectOutput;)V
  #346 = Utf8               (Ljava/io/ObjectOutputStream;)V
  #347 = Utf8               ()Ljava/io/ObjectOutputStream$PutField;
  #348 = Utf8               ()Ljava/io/ObjectStreamClass;
  #349 = Utf8               (Ljava/io/ObjectStreamClass;)V
  #350 = Utf8               (Ljava/io/ObjectStreamClass;Z)V
  #351 = Utf8               ()[Ljava/io/ObjectStreamClass$ClassDataSlot;
  #352 = Utf8               (Z)[Ljava/io/ObjectStreamField;
  #353 = Utf8               (Ljava/io/OutputStream;)V
  #354 = Utf8               (Z)Ljava/lang/Boolean;
  #355 = Utf8               ()Ljava/lang/Class;
  #356 = Utf8               ()[Ljava/lang/Class;
  #357 = Utf8               (Ljava/lang/Class;)V
  #358 = Utf8               (Ljava/lang/Class;)Z
  #359 = Utf8               (Ljava/lang/Class;Z)V
  #360 = Utf8               (Ljava/lang/Class<*>;)V
  #361 = Utf8               ()Ljava/lang/Object;
  #362 = Utf8               (Ljava/lang/Object;Z)V
  #363 = Utf8               (Ljava/lang/Object;[B)V
  #364 = Utf8               ()Ljava/lang/SecurityManager;
  #365 = Utf8               (Ljava/lang/String;)J
  #366 = Utf8               (Ljava/lang/String;J)V
  #367 = Utf8               (I)Ljava/lang/StringBuilder;
  #368 = Utf8               (Ljava/security/Permission;)V
  #369 = Utf8               (Ljava/lang/Object;Ljava/io/ObjectOutputStream;)V
  #370 = Utf8               (Ljava/io/ObjectOutputStream;)Ljava/io/ObjectOutputStream$BlockDataOutputStream;
  #371 = Utf8               (Ljava/io/ObjectOutputStream;)Ljava/io/ObjectOutputStream$DebugTraceInfoStack;
  #372 = Utf8               (Ljava/io/ObjectOutputStream;Ljava/io/ObjectStreamClass;)V
  #373 = Utf8               (Ljava/lang/Class;Z)Ljava/io/ObjectStreamClass;
  #374 = Utf8               (Ljava/lang/Enum;Ljava/io/ObjectStreamClass;Z)V
  #375 = Utf8               (Ljava/lang/Object;Ljava/io/ObjectStreamClass;)V
  #376 = Utf8               (Ljava/lang/Object;Ljava/io/ObjectStreamClass;Z)V
  #377 = Utf8               (Ljava/io/ObjectOutputStream;Ljava/lang/Object;Z)V
  #378 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;
  #379 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)V
  #380 = Utf8               (Ljava/lang/Object;[Ljava/lang/Object;)V
  #381 = Utf8               (Ljava/security/PrivilegedAction;)Ljava/lang/Object;
  #382 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;
  #383 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;
  #384 = Utf8               (Ljava/lang/Class;Ljava/lang/ref/ReferenceQueue;)V
  #385 = Utf8               (Ljava/lang/ref/ReferenceQueue;Ljava/util/concurrent/ConcurrentMap;)V
  #386 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
  #387 = NameAndType        #111:#63      //  depth:I
  #388 = NameAndType        #207:#63      //  protocol:I
  #389 = NameAndType        #117:#73      //  enableOverride:Z
  #390 = NameAndType        #118:#73      //  enableReplace:Z
  #391 = NameAndType        #120:#73      //  extendedDebugInfo:Z
  #392 = NameAndType        #205:#74      //  primVals:[B
  #393 = NameAndType        #99:#333      //  bout:Ljava/io/ObjectOutputStream$BlockDataOutputStream;
  #394 = NameAndType        #108:#334     //  debugInfoStack:Ljava/io/ObjectOutputStream$DebugTraceInfoStack;
  #395 = NameAndType        #143:#335     //  handles:Ljava/io/ObjectOutputStream$HandleTable;
  #396 = NameAndType        #106:#336     //  curPut:Ljava/io/ObjectOutputStream$PutFieldImpl;
  #397 = NameAndType        #221:#337     //  subs:Ljava/io/ObjectOutputStream$ReplaceTable;
  #398 = NameAndType        #112:#338     //  desc:Ljava/io/ObjectStreamClass;
  #399 = NameAndType        #105:#339     //  curContext:Ljava/io/SerialCallbackContext;
  #400 = NameAndType        #67:#340      //  SUBCLASS_IMPLEMENTATION_PERMISSION:Ljava/io/SerializablePermission;
  #401 = NameAndType        #68:#340      //  SUBSTITUTION_PERMISSION:Ljava/io/SerializablePermission;
  #402 = NameAndType        #72:#66       //  TYPE:Ljava/lang/Class;
  #403 = NameAndType        #220:#341     //  subclassAuditsQueue:Ljava/lang/ref/ReferenceQueue;
  #404 = NameAndType        #219:#342     //  subclassAudits:Ljava/util/concurrent/ConcurrentMap;
  #405 = NameAndType        #133:#31      //  getNumObjFields:()I
  #406 = NameAndType        #136:#31      //  getPrimDataSize:()I
  #407 = NameAndType        #216:#31      //  size:()I
  #408 = NameAndType        #60:#33       //  "<init>":()V
  #409 = NameAndType        #100:#33      //  checkDefaultSerialize:()V
  #410 = NameAndType        #102:#33      //  checkSerialize:()V
  #411 = NameAndType        #103:#33      //  clear:()V
  #412 = NameAndType        #104:#33      //  close:()V
  #413 = NameAndType        #115:#33      //  drain:()V
  #414 = NameAndType        #123:#33      //  flush:()V
  #415 = NameAndType        #204:#33      //  pop:()V
  #416 = NameAndType        #215:#33      //  setUsed:()V
  #417 = NameAndType        #228:#33      //  verifySubclass:()V
  #418 = NameAndType        #247:#33      //  writeFields:()V
  #419 = NameAndType        #258:#33      //  writeNull:()V
  #420 = NameAndType        #267:#33      //  writeStreamHeader:()V
  #421 = NameAndType        #98:#34       //  booleanValue:()Z
  #422 = NameAndType        #144:#34      //  hasWriteObjectMethod:()Z
  #423 = NameAndType        #145:#34      //  hasWriteReplaceMethod:()Z
  #424 = NameAndType        #148:#34      //  isArray:()Z
  #425 = NameAndType        #149:#34      //  isExternalizable:()Z
  #426 = NameAndType        #150:#34      //  isPrimitive:()Z
  #427 = NameAndType        #151:#34      //  isProxy:()Z
  #428 = NameAndType        #152:#34      //  isUnshared:()Z
  #429 = NameAndType        #240:#35      //  writeDouble:(D)V
  #430 = NameAndType        #248:#36      //  writeFloat:(F)V
  #431 = NameAndType        #229:#37      //  write:(I)V
  #432 = NameAndType        #233:#37      //  writeByte:(I)V
  #433 = NameAndType        #235:#37      //  writeChar:(I)V
  #434 = NameAndType        #250:#37      //  writeHandle:(I)V
  #435 = NameAndType        #251:#37      //  writeInt:(I)V
  #436 = NameAndType        #265:#37      //  writeShort:(I)V
  #437 = NameAndType        #60:#38       //  "<init>":(IF)V
  #438 = NameAndType        #253:#39      //  writeLong:(J)V
  #439 = NameAndType        #231:#44      //  writeBoolean:(Z)V
  #440 = NameAndType        #214:#45      //  setBlockDataMode:(Z)Z
  #441 = NameAndType        #229:#48      //  write:([BIIZ)V
  #442 = NameAndType        #236:#49      //  writeChars:([CII)V
  #443 = NameAndType        #241:#50      //  writeDoubles:([DII)V
  #444 = NameAndType        #114:#51      //  doublesToBytes:([DI[BII)V
  #445 = NameAndType        #249:#52      //  writeFloats:([FII)V
  #446 = NameAndType        #122:#53      //  floatsToBytes:([FI[BII)V
  #447 = NameAndType        #252:#54      //  writeInts:([III)V
  #448 = NameAndType        #255:#55      //  writeLongs:([JII)V
  #449 = NameAndType        #266:#56      //  writeShorts:([SII)V
  #450 = NameAndType        #232:#57      //  writeBooleans:([ZII)V
  #451 = NameAndType        #245:#343     //  writeExternalData:(Ljava/io/Externalizable;)V
  #452 = NameAndType        #246:#344     //  writeFatalException:(Ljava/io/IOException;)V
  #453 = NameAndType        #243:#345     //  writeExternal:(Ljava/io/ObjectOutput;)V
  #454 = NameAndType        #256:#346     //  writeNonProxy:(Ljava/io/ObjectOutputStream;)V
  #455 = NameAndType        #129:#348     //  getDesc:()Ljava/io/ObjectStreamClass;
  #456 = NameAndType        #140:#348     //  getSuperDesc:()Ljava/io/ObjectStreamClass;
  #457 = NameAndType        #239:#349     //  writeClassDescriptor:(Ljava/io/ObjectStreamClass;)V
  #458 = NameAndType        #238:#350     //  writeClassDesc:(Ljava/io/ObjectStreamClass;Z)V
  #459 = NameAndType        #257:#350     //  writeNonProxyDesc:(Ljava/io/ObjectStreamClass;Z)V
  #460 = NameAndType        #263:#350     //  writeProxyDesc:(Ljava/io/ObjectStreamClass;Z)V
  #461 = NameAndType        #127:#351     //  getClassDataLayout:()[Ljava/io/ObjectStreamClass$ClassDataSlot;
  #462 = NameAndType        #130:#352     //  getFields:(Z)[Ljava/io/ObjectStreamField;
  #463 = NameAndType        #60:#353      //  "<init>":(Ljava/io/OutputStream;)V
  #464 = NameAndType        #227:#354     //  valueOf:(Z)Ljava/lang/Boolean;
  #465 = NameAndType        #124:#355     //  forClass:()Ljava/lang/Class;
  #466 = NameAndType        #126:#355     //  getClass:()Ljava/lang/Class;
  #467 = NameAndType        #128:#355     //  getComponentType:()Ljava/lang/Class;
  #468 = NameAndType        #141:#355     //  getType:()Ljava/lang/Class;
  #469 = NameAndType        #131:#356     //  getInterfaces:()[Ljava/lang/Class;
  #470 = NameAndType        #60:#357      //  "<init>":(Ljava/lang/Class;)V
  #471 = NameAndType        #92:#357      //  annotateClass:(Ljava/lang/Class;)V
  #472 = NameAndType        #93:#357      //  annotateProxyClass:(Ljava/lang/Class;)V
  #473 = NameAndType        #97:#358      //  auditSubclass:(Ljava/lang/Class;)Z
  #474 = NameAndType        #237:#359     //  writeClass:(Ljava/lang/Class;Z)V
  #475 = NameAndType        #134:#361     //  getObj:()Ljava/lang/Object;
  #476 = NameAndType        #96:#40       //  assign:(Ljava/lang/Object;)I
  #477 = NameAndType        #199:#40      //  lookup:(Ljava/lang/Object;)I
  #478 = NameAndType        #261:#41      //  writeObjectOverride:(Ljava/lang/Object;)V
  #479 = NameAndType        #260:#362     //  writeObject0:(Ljava/lang/Object;Z)V
  #480 = NameAndType        #137:#363     //  getPrimFieldValues:(Ljava/lang/Object;[B)V
  #481 = NameAndType        #139:#364     //  getSecurityManager:()Ljava/lang/SecurityManager;
  #482 = NameAndType        #132:#32      //  getName:()Ljava/lang/String;
  #483 = NameAndType        #200:#32      //  name:()Ljava/lang/String;
  #484 = NameAndType        #224:#32      //  toString:()Ljava/lang/String;
  #485 = NameAndType        #142:#365     //  getUTFLength:(Ljava/lang/String;)J
  #486 = NameAndType        #60:#42       //  "<init>":(Ljava/lang/String;)V
  #487 = NameAndType        #208:#42      //  push:(Ljava/lang/String;)V
  #488 = NameAndType        #234:#42      //  writeBytes:(Ljava/lang/String;)V
  #489 = NameAndType        #236:#42      //  writeChars:(Ljava/lang/String;)V
  #490 = NameAndType        #270:#42      //  writeUTF:(Ljava/lang/String;)V
  #491 = NameAndType        #254:#366     //  writeLongUTF:(Ljava/lang/String;J)V
  #492 = NameAndType        #270:#366     //  writeUTF:(Ljava/lang/String;J)V
  #493 = NameAndType        #268:#43      //  writeString:(Ljava/lang/String;Z)V
  #494 = NameAndType        #94:#367      //  append:(I)Ljava/lang/StringBuilder;
  #495 = NameAndType        #101:#368     //  checkPermission:(Ljava/security/Permission;)V
  #496 = NameAndType        #146:#369     //  invokeWriteObject:(Ljava/lang/Object;Ljava/io/ObjectOutputStream;)V
  #497 = NameAndType        #60:#372      //  "<init>":(Ljava/io/ObjectOutputStream;Ljava/io/ObjectStreamClass;)V
  #498 = NameAndType        #199:#373     //  lookup:(Ljava/lang/Class;Z)Ljava/io/ObjectStreamClass;
  #499 = NameAndType        #242:#374     //  writeEnum:(Ljava/lang/Enum;Ljava/io/ObjectStreamClass;Z)V
  #500 = NameAndType        #60:#375      //  "<init>":(Ljava/lang/Object;Ljava/io/ObjectStreamClass;)V
  #501 = NameAndType        #109:#375     //  defaultWriteFields:(Ljava/lang/Object;Ljava/io/ObjectStreamClass;)V
  #502 = NameAndType        #264:#375     //  writeSerialData:(Ljava/lang/Object;Ljava/io/ObjectStreamClass;)V
  #503 = NameAndType        #230:#376     //  writeArray:(Ljava/lang/Object;Ljava/io/ObjectStreamClass;Z)V
  #504 = NameAndType        #262:#376     //  writeOrdinaryObject:(Ljava/lang/Object;Ljava/io/ObjectStreamClass;Z)V
  #505 = NameAndType        #125:#378     //  get:(Ljava/lang/Object;)Ljava/lang/Object;
  #506 = NameAndType        #147:#378     //  invokeWriteReplace:(Ljava/lang/Object;)Ljava/lang/Object;
  #507 = NameAndType        #199:#378     //  lookup:(Ljava/lang/Object;)Ljava/lang/Object;
  #508 = NameAndType        #211:#378     //  replaceObject:(Ljava/lang/Object;)Ljava/lang/Object;
  #509 = NameAndType        #96:#379      //  assign:(Ljava/lang/Object;Ljava/lang/Object;)V
  #510 = NameAndType        #135:#380     //  getObjFieldValues:(Ljava/lang/Object;[Ljava/lang/Object;)V
  #511 = NameAndType        #113:#381     //  doPrivileged:(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
  #512 = NameAndType        #94:#382      //  append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
  #513 = NameAndType        #94:#383      //  append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
  #514 = NameAndType        #60:#384      //  "<init>":(Ljava/lang/Class;Ljava/lang/ref/ReferenceQueue;)V
  #515 = NameAndType        #206:#385     //  processQueue:(Ljava/lang/ref/ReferenceQueue;Ljava/util/concurrent/ConcurrentMap;)V
  #516 = NameAndType        #210:#386     //  putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
  #517 = Fieldref           #291.#387     //  java/io/ObjectOutputStream.depth:I
  #518 = Fieldref           #291.#388     //  java/io/ObjectOutputStream.protocol:I
  #519 = Fieldref           #291.#389     //  java/io/ObjectOutputStream.enableOverride:Z
  #520 = Fieldref           #291.#390     //  java/io/ObjectOutputStream.enableReplace:Z
  #521 = Fieldref           #291.#391     //  java/io/ObjectOutputStream.extendedDebugInfo:Z
  #522 = Fieldref           #291.#392     //  java/io/ObjectOutputStream.primVals:[B
  #523 = Fieldref           #291.#393     //  java/io/ObjectOutputStream.bout:Ljava/io/ObjectOutputStream$BlockDataOutputStream;
  #524 = Fieldref           #291.#394     //  java/io/ObjectOutputStream.debugInfoStack:Ljava/io/ObjectOutputStream$DebugTraceInfoStack;
  #525 = Fieldref           #291.#395     //  java/io/ObjectOutputStream.handles:Ljava/io/ObjectOutputStream$HandleTable;
  #526 = Fieldref           #291.#396     //  java/io/ObjectOutputStream.curPut:Ljava/io/ObjectOutputStream$PutFieldImpl;
  #527 = Fieldref           #291.#397     //  java/io/ObjectOutputStream.subs:Ljava/io/ObjectOutputStream$ReplaceTable;
  #528 = Fieldref           #291.#399     //  java/io/ObjectOutputStream.curContext:Ljava/io/SerialCallbackContext;
  #529 = Fieldref           #291.#400     //  java/io/ObjectOutputStream.SUBCLASS_IMPLEMENTATION_PERMISSION:Ljava/io/SerializablePermission;
  #530 = Fieldref           #291.#401     //  java/io/ObjectOutputStream.SUBSTITUTION_PERMISSION:Ljava/io/SerializablePermission;
  #531 = Fieldref           #294.#403     //  java/io/ObjectOutputStream$Caches.subclassAuditsQueue:Ljava/lang/ref/ReferenceQueue;
  #532 = Fieldref           #294.#404     //  java/io/ObjectOutputStream$Caches.subclassAudits:Ljava/util/concurrent/ConcurrentMap;
  #533 = Fieldref           #301.#398     //  java/io/ObjectStreamClass$ClassDataSlot.desc:Ljava/io/ObjectStreamClass;
  #534 = Fieldref           #308.#402     //  java/lang/Boolean.TYPE:Ljava/lang/Class;
  #535 = Fieldref           #309.#402     //  java/lang/Byte.TYPE:Ljava/lang/Class;
  #536 = Fieldref           #310.#402     //  java/lang/Character.TYPE:Ljava/lang/Class;
  #537 = Fieldref           #312.#402     //  java/lang/Double.TYPE:Ljava/lang/Class;
  #538 = Fieldref           #314.#402     //  java/lang/Float.TYPE:Ljava/lang/Class;
  #539 = Fieldref           #318.#402     //  java/lang/Integer.TYPE:Ljava/lang/Class;
  #540 = Fieldref           #320.#402     //  java/lang/Long.TYPE:Ljava/lang/Class;
  #541 = Fieldref           #325.#402     //  java/lang/Short.TYPE:Ljava/lang/Class;
  #542 = Methodref          #287.#486     //  java/io/IOException."<init>":(Ljava/lang/String;)V
  #543 = Methodref          #288.#486     //  java/io/NotActiveException."<init>":(Ljava/lang/String;)V
  #544 = Methodref          #289.#486     //  java/io/NotSerializableException."<init>":(Ljava/lang/String;)V
  #545 = Methodref          #291.#411     //  java/io/ObjectOutputStream.clear:()V
  #546 = Methodref          #291.#414     //  java/io/ObjectOutputStream.flush:()V
  #547 = Methodref          #291.#417     //  java/io/ObjectOutputStream.verifySubclass:()V
  #548 = Methodref          #291.#419     //  java/io/ObjectOutputStream.writeNull:()V
  #549 = Methodref          #291.#420     //  java/io/ObjectOutputStream.writeStreamHeader:()V
  #550 = Methodref          #291.#434     //  java/io/ObjectOutputStream.writeHandle:(I)V
  #551 = Methodref          #291.#444     //  java/io/ObjectOutputStream.doublesToBytes:([DI[BII)V
  #552 = Methodref          #291.#446     //  java/io/ObjectOutputStream.floatsToBytes:([FI[BII)V
  #553 = Methodref          #291.#451     //  java/io/ObjectOutputStream.writeExternalData:(Ljava/io/Externalizable;)V
  #554 = Methodref          #291.#452     //  java/io/ObjectOutputStream.writeFatalException:(Ljava/io/IOException;)V
  #555 = Methodref          #291.#457     //  java/io/ObjectOutputStream.writeClassDescriptor:(Ljava/io/ObjectStreamClass;)V
  #556 = Methodref          #291.#458     //  java/io/ObjectOutputStream.writeClassDesc:(Ljava/io/ObjectStreamClass;Z)V
  #557 = Methodref          #291.#459     //  java/io/ObjectOutputStream.writeNonProxyDesc:(Ljava/io/ObjectStreamClass;Z)V
  #558 = Methodref          #291.#460     //  java/io/ObjectOutputStream.writeProxyDesc:(Ljava/io/ObjectStreamClass;Z)V
  #559 = Methodref          #291.#471     //  java/io/ObjectOutputStream.annotateClass:(Ljava/lang/Class;)V
  #560 = Methodref          #291.#472     //  java/io/ObjectOutputStream.annotateProxyClass:(Ljava/lang/Class;)V
  #561 = Methodref          #291.#473     //  java/io/ObjectOutputStream.auditSubclass:(Ljava/lang/Class;)Z
  #562 = Methodref          #291.#474     //  java/io/ObjectOutputStream.writeClass:(Ljava/lang/Class;Z)V
  #563 = Methodref          #291.#478     //  java/io/ObjectOutputStream.writeObjectOverride:(Ljava/lang/Object;)V
  #564 = Methodref          #291.#479     //  java/io/ObjectOutputStream.writeObject0:(Ljava/lang/Object;Z)V
  #565 = Methodref          #291.#493     //  java/io/ObjectOutputStream.writeString:(Ljava/lang/String;Z)V
  #566 = Methodref          #291.#499     //  java/io/ObjectOutputStream.writeEnum:(Ljava/lang/Enum;Ljava/io/ObjectStreamClass;Z)V
  #567 = Methodref          #291.#501     //  java/io/ObjectOutputStream.defaultWriteFields:(Ljava/lang/Object;Ljava/io/ObjectStreamClass;)V
  #568 = Methodref          #291.#502     //  java/io/ObjectOutputStream.writeSerialData:(Ljava/lang/Object;Ljava/io/ObjectStreamClass;)V
  #569 = Methodref          #291.#503     //  java/io/ObjectOutputStream.writeArray:(Ljava/lang/Object;Ljava/io/ObjectStreamClass;Z)V
  #570 = Methodref          #291.#504     //  java/io/ObjectOutputStream.writeOrdinaryObject:(Ljava/lang/Object;Ljava/io/ObjectStreamClass;Z)V
  #571 = Methodref          #291.#508     //  java/io/ObjectOutputStream.replaceObject:(Ljava/lang/Object;)Ljava/lang/Object;
  #572 = Methodref          #292.#470     //  java/io/ObjectOutputStream$1."<init>":(Ljava/lang/Class;)V
  #573 = Methodref          #293.#412     //  java/io/ObjectOutputStream$BlockDataOutputStream.close:()V
  #574 = Methodref          #293.#413     //  java/io/ObjectOutputStream$BlockDataOutputStream.drain:()V
  #575 = Methodref          #293.#414     //  java/io/ObjectOutputStream$BlockDataOutputStream.flush:()V
  #576 = Methodref          #293.#429     //  java/io/ObjectOutputStream$BlockDataOutputStream.writeDouble:(D)V
  #577 = Methodref          #293.#430     //  java/io/ObjectOutputStream$BlockDataOutputStream.writeFloat:(F)V
  #578 = Methodref          #293.#431     //  java/io/ObjectOutputStream$BlockDataOutputStream.write:(I)V
  #579 = Methodref          #293.#432     //  java/io/ObjectOutputStream$BlockDataOutputStream.writeByte:(I)V
  #580 = Methodref          #293.#433     //  java/io/ObjectOutputStream$BlockDataOutputStream.writeChar:(I)V
  #581 = Methodref          #293.#435     //  java/io/ObjectOutputStream$BlockDataOutputStream.writeInt:(I)V
  #582 = Methodref          #293.#436     //  java/io/ObjectOutputStream$BlockDataOutputStream.writeShort:(I)V
  #583 = Methodref          #293.#438     //  java/io/ObjectOutputStream$BlockDataOutputStream.writeLong:(J)V
  #584 = Methodref          #293.#439     //  java/io/ObjectOutputStream$BlockDataOutputStream.writeBoolean:(Z)V
  #585 = Methodref          #293.#440     //  java/io/ObjectOutputStream$BlockDataOutputStream.setBlockDataMode:(Z)Z
  #586 = Methodref          #293.#441     //  java/io/ObjectOutputStream$BlockDataOutputStream.write:([BIIZ)V
  #587 = Methodref          #293.#442     //  java/io/ObjectOutputStream$BlockDataOutputStream.writeChars:([CII)V
  #588 = Methodref          #293.#443     //  java/io/ObjectOutputStream$BlockDataOutputStream.writeDoubles:([DII)V
  #589 = Methodref          #293.#445     //  java/io/ObjectOutputStream$BlockDataOutputStream.writeFloats:([FII)V
  #590 = Methodref          #293.#447     //  java/io/ObjectOutputStream$BlockDataOutputStream.writeInts:([III)V
  #591 = Methodref          #293.#448     //  java/io/ObjectOutputStream$BlockDataOutputStream.writeLongs:([JII)V
  #592 = Methodref          #293.#449     //  java/io/ObjectOutputStream$BlockDataOutputStream.writeShorts:([SII)V
  #593 = Methodref          #293.#450     //  java/io/ObjectOutputStream$BlockDataOutputStream.writeBooleans:([ZII)V
  #594 = Methodref          #293.#463     //  java/io/ObjectOutputStream$BlockDataOutputStream."<init>":(Ljava/io/OutputStream;)V
  #595 = Methodref          #293.#485     //  java/io/ObjectOutputStream$BlockDataOutputStream.getUTFLength:(Ljava/lang/String;)J
  #596 = Methodref          #293.#488     //  java/io/ObjectOutputStream$BlockDataOutputStream.writeBytes:(Ljava/lang/String;)V
  #597 = Methodref          #293.#489     //  java/io/ObjectOutputStream$BlockDataOutputStream.writeChars:(Ljava/lang/String;)V
  #598 = Methodref          #293.#490     //  java/io/ObjectOutputStream$BlockDataOutputStream.writeUTF:(Ljava/lang/String;)V
  #599 = Methodref          #293.#491     //  java/io/ObjectOutputStream$BlockDataOutputStream.writeLongUTF:(Ljava/lang/String;J)V
  #600 = Methodref          #293.#492     //  java/io/ObjectOutputStream$BlockDataOutputStream.writeUTF:(Ljava/lang/String;J)V
  #601 = Methodref          #295.#408     //  java/io/ObjectOutputStream$DebugTraceInfoStack."<init>":()V
  #602 = Methodref          #295.#415     //  java/io/ObjectOutputStream$DebugTraceInfoStack.pop:()V
  #603 = Methodref          #295.#484     //  java/io/ObjectOutputStream$DebugTraceInfoStack.toString:()Ljava/lang/String;
  #604 = Methodref          #295.#487     //  java/io/ObjectOutputStream$DebugTraceInfoStack.push:(Ljava/lang/String;)V
  #605 = Methodref          #296.#407     //  java/io/ObjectOutputStream$HandleTable.size:()I
  #606 = Methodref          #296.#411     //  java/io/ObjectOutputStream$HandleTable.clear:()V
  #607 = Methodref          #296.#437     //  java/io/ObjectOutputStream$HandleTable."<init>":(IF)V
  #608 = Methodref          #296.#476     //  java/io/ObjectOutputStream$HandleTable.assign:(Ljava/lang/Object;)I
  #609 = Methodref          #296.#477     //  java/io/ObjectOutputStream$HandleTable.lookup:(Ljava/lang/Object;)I
  #610 = Methodref          #298.#418     //  java/io/ObjectOutputStream$PutFieldImpl.writeFields:()V
  #611 = Methodref          #298.#497     //  java/io/ObjectOutputStream$PutFieldImpl."<init>":(Ljava/io/ObjectOutputStream;Ljava/io/ObjectStreamClass;)V
  #612 = Methodref          #299.#411     //  java/io/ObjectOutputStream$ReplaceTable.clear:()V
  #613 = Methodref          #299.#437     //  java/io/ObjectOutputStream$ReplaceTable."<init>":(IF)V
  #614 = Methodref          #299.#507     //  java/io/ObjectOutputStream$ReplaceTable.lookup:(Ljava/lang/Object;)Ljava/lang/Object;
  #615 = Methodref          #299.#509     //  java/io/ObjectOutputStream$ReplaceTable.assign:(Ljava/lang/Object;Ljava/lang/Object;)V
  #616 = Methodref          #300.#405     //  java/io/ObjectStreamClass.getNumObjFields:()I
  #617 = Methodref          #300.#406     //  java/io/ObjectStreamClass.getPrimDataSize:()I
  #618 = Methodref          #300.#409     //  java/io/ObjectStreamClass.checkDefaultSerialize:()V
  #619 = Methodref          #300.#410     //  java/io/ObjectStreamClass.checkSerialize:()V
  #620 = Methodref          #300.#422     //  java/io/ObjectStreamClass.hasWriteObjectMethod:()Z
  #621 = Methodref          #300.#423     //  java/io/ObjectStreamClass.hasWriteReplaceMethod:()Z
  #622 = Methodref          #300.#425     //  java/io/ObjectStreamClass.isExternalizable:()Z
  #623 = Methodref          #300.#427     //  java/io/ObjectStreamClass.isProxy:()Z
  #624 = Methodref          #300.#454     //  java/io/ObjectStreamClass.writeNonProxy:(Ljava/io/ObjectOutputStream;)V
  #625 = Methodref          #300.#456     //  java/io/ObjectStreamClass.getSuperDesc:()Ljava/io/ObjectStreamClass;
  #626 = Methodref          #300.#461     //  java/io/ObjectStreamClass.getClassDataLayout:()[Ljava/io/ObjectStreamClass$ClassDataSlot;
  #627 = Methodref          #300.#462     //  java/io/ObjectStreamClass.getFields:(Z)[Ljava/io/ObjectStreamField;
  #628 = Methodref          #300.#465     //  java/io/ObjectStreamClass.forClass:()Ljava/lang/Class;
  #629 = Methodref          #300.#480     //  java/io/ObjectStreamClass.getPrimFieldValues:(Ljava/lang/Object;[B)V
  #630 = Methodref          #300.#482     //  java/io/ObjectStreamClass.getName:()Ljava/lang/String;
  #631 = Methodref          #300.#496     //  java/io/ObjectStreamClass.invokeWriteObject:(Ljava/lang/Object;Ljava/io/ObjectOutputStream;)V
  #632 = Methodref          #300.#498     //  java/io/ObjectStreamClass.lookup:(Ljava/lang/Class;Z)Ljava/io/ObjectStreamClass;
  #633 = Methodref          #300.#506     //  java/io/ObjectStreamClass.invokeWriteReplace:(Ljava/lang/Object;)Ljava/lang/Object;
  #634 = Methodref          #300.#510     //  java/io/ObjectStreamClass.getObjFieldValues:(Ljava/lang/Object;[Ljava/lang/Object;)V
  #635 = Methodref          #300.#515     //  java/io/ObjectStreamClass.processQueue:(Ljava/lang/ref/ReferenceQueue;Ljava/util/concurrent/ConcurrentMap;)V
  #636 = Methodref          #302.#514     //  java/io/ObjectStreamClass$WeakClassKey."<init>":(Ljava/lang/Class;Ljava/lang/ref/ReferenceQueue;)V
  #637 = Methodref          #304.#428     //  java/io/ObjectStreamField.isUnshared:()Z
  #638 = Methodref          #304.#468     //  java/io/ObjectStreamField.getType:()Ljava/lang/Class;
  #639 = Methodref          #304.#482     //  java/io/ObjectStreamField.getName:()Ljava/lang/String;
  #640 = Methodref          #305.#408     //  java/io/OutputStream."<init>":()V
  #641 = Methodref          #306.#416     //  java/io/SerialCallbackContext.setUsed:()V
  #642 = Methodref          #306.#455     //  java/io/SerialCallbackContext.getDesc:()Ljava/io/ObjectStreamClass;
  #643 = Methodref          #306.#475     //  java/io/SerialCallbackContext.getObj:()Ljava/lang/Object;
  #644 = Methodref          #306.#500     //  java/io/SerialCallbackContext."<init>":(Ljava/lang/Object;Ljava/io/ObjectStreamClass;)V
  #645 = Methodref          #308.#421     //  java/lang/Boolean.booleanValue:()Z
  #646 = Methodref          #308.#464     //  java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
  #647 = Methodref          #311.#424     //  java/lang/Class.isArray:()Z
  #648 = Methodref          #311.#426     //  java/lang/Class.isPrimitive:()Z
  #649 = Methodref          #311.#467     //  java/lang/Class.getComponentType:()Ljava/lang/Class;
  #650 = Methodref          #311.#469     //  java/lang/Class.getInterfaces:()[Ljava/lang/Class;
  #651 = Methodref          #311.#482     //  java/lang/Class.getName:()Ljava/lang/String;
  #652 = Methodref          #313.#483     //  java/lang/Enum.name:()Ljava/lang/String;
  #653 = Methodref          #315.#486     //  java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
  #654 = Methodref          #316.#486     //  java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
  #655 = Methodref          #317.#408     //  java/lang/IndexOutOfBoundsException."<init>":()V
  #656 = Methodref          #319.#408     //  java/lang/InternalError."<init>":()V
  #657 = Methodref          #321.#408     //  java/lang/NullPointerException."<init>":()V
  #658 = Methodref          #322.#466     //  java/lang/Object.getClass:()Ljava/lang/Class;
  #659 = Methodref          #322.#484     //  java/lang/Object.toString:()Ljava/lang/String;
  #660 = Methodref          #324.#495     //  java/lang/SecurityManager.checkPermission:(Ljava/security/Permission;)V
  #661 = Methodref          #327.#408     //  java/lang/StringBuilder."<init>":()V
  #662 = Methodref          #327.#484     //  java/lang/StringBuilder.toString:()Ljava/lang/String;
  #663 = Methodref          #327.#494     //  java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
  #664 = Methodref          #327.#512     //  java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
  #665 = Methodref          #327.#513     //  java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
  #666 = Methodref          #328.#481     //  java/lang/System.getSecurityManager:()Ljava/lang/SecurityManager;
  #667 = Methodref          #330.#511     //  java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
  #668 = Methodref          #332.#486     //  sun/security/action/GetBooleanAction."<init>":(Ljava/lang/String;)V
  #669 = InterfaceMethodref #286.#453     //  java/io/Externalizable.writeExternal:(Ljava/io/ObjectOutput;)V
  #670 = InterfaceMethodref #331.#505     //  java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
  #671 = InterfaceMethodref #331.#516     //  java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
  #672 = Utf8               BlockDataOutputStream
  #673 = Utf8               Caches
  #674 = Utf8               ClassDataSlot
  #675 = Utf8               DebugTraceInfoStack
  #676 = Utf8               HandleTable
  #677 = Utf8               ObjectOutputStream.java
  #678 = Utf8               PutField
  #679 = Utf8               PutFieldImpl
  #680 = Utf8               ReplaceTable
  #681 = Utf8               WeakClassKey
{
  public java.io.ObjectOutputStream(java.io.OutputStream) throws java.io.IOException;
    flags: ACC_PUBLIC
    Code:
      stack=5, locals=2, args_size=2
         0: aload_0       
         1: invokespecial #640                // Method java/io/OutputStream."<init>":()V
         4: aload_0       
         5: iconst_2      
         6: putfield      #518                // Field protocol:I
         9: aload_0       
        10: invokespecial #547                // Method verifySubclass:()V
        13: aload_0       
        14: new           #293                // class java/io/ObjectOutputStream$BlockDataOutputStream
        17: dup           
        18: aload_1       
        19: invokespecial #594                // Method java/io/ObjectOutputStream$BlockDataOutputStream."<init>":(Ljava/io/OutputStream;)V
        22: putfield      #523                // Field bout:Ljava/io/ObjectOutputStream$BlockDataOutputStream;
        25: aload_0       
        26: new           #296                // class java/io/ObjectOutputStream$HandleTable
        29: dup           
        30: bipush        10
        32: ldc           #2                  // float 3.0f
        34: invokespecial #607                // Method java/io/ObjectOutputStream$HandleTable."<init>":(IF)V
        37: putfield      #525                // Field handles:Ljava/io/ObjectOutputStream$HandleTable;
        40: aload_0       
        41: new           #299                // class java/io/ObjectOutputStream$ReplaceTable
        44: dup           
        45: bipush        10
        47: ldc           #2                  // float 3.0f
        49: invokespecial #613                // Method java/io/ObjectOutputStream$ReplaceTable."<init>":(IF)V
        52: putfield      #527                // Field subs:Ljava/io/ObjectOutputStream$ReplaceTable;
        55: aload_0       
        56: iconst_0      
        57: putfield      #519                // Field enableOverride:Z
        60: aload_0       
        61: invokevirtual #549                // Method writeStreamHeader:()V
        64: aload_0       
        65: getfield      #523                // Field bout:Ljava/io/ObjectOutputStream$BlockDataOutputStream;
        68: iconst_1      
        69: invokevirtual #585                // Method java/io/ObjectOutputStream$BlockDataOutputStream.setBlockDataMode:(Z)Z
        72: pop           
        73: getstatic     #521                // Field extendedDebugInfo:Z
        76: ifeq          93
        79: aload_0       
        80: new           #295                // class java/io/ObjectOutputStream$DebugTraceInfoStack
        83: dup           
        84: invokespecial #601                // Method java/io/ObjectOutputStream$DebugTraceInfoStack."<init>":()V
        87: putfield      #524                // Field debugInfoStack:Ljava/io/ObjectOutputStream$DebugTraceInfoStack;
        90: goto          98
        93: aload_0       
        94: aconst_null   
        95: putfield      #524                // Field debugInfoStack:Ljava/io/ObjectOutputStream$DebugTraceInfoStack;
        98: return        
      StackMapTable: number_of_entries = 2
           frame_type = 255 /* full_frame */
          offset_delta = 93
          locals = [ class java/io/ObjectOutputStream, class java/io/OutputStream ]
          stack = []
           frame_type = 4 /* same */

      LineNumberTable:
        line 239: 0
        line 182: 4
        line 240: 9
        line 241: 13
        line 242: 25
        line 243: 40
        line 244: 55
        line 245: 60
        line 246: 64
        line 247: 73
        line 248: 79
        line 250: 93
        line 252: 98
    Exceptions:
      throws java.io.IOException

  protected java.io.ObjectOutputStream() throws java.io.IOException, java.lang.SecurityException;
    flags: ACC_PROTECTED
    Code:
      stack=2, locals=2, args_size=1
         0: aload_0       
         1: invokespecial #640                // Method java/io/OutputStream."<init>":()V
         4: aload_0       
         5: iconst_2      
         6: putfield      #518                // Field protocol:I
         9: invokestatic  #666                // Method java/lang/System.getSecurityManager:()Ljava/lang/SecurityManager;
        12: astore_1      
        13: aload_1       
        14: ifnull        24
        17: aload_1       
        18: getstatic     #529                // Field SUBCLASS_IMPLEMENTATION_PERMISSION:Ljava/io/SerializablePermission;
        21: invokevirtual #660                // Method java/lang/SecurityManager.checkPermission:(Ljava/security/Permission;)V
        24: aload_0       
        25: aconst_null   
        26: putfield      #523                // Field bout:Ljava/io/ObjectOutputStream$BlockDataOutputStream;
        29: aload_0       
        30: aconst_null   
        31: putfield      #525                // Field handles:Ljava/io/ObjectOutputStream$HandleTable;
        34: aload_0       
        35: aconst_null   
        36: putfield      #527                // Field subs:Ljava/io/ObjectOutputStream$ReplaceTable;
        39: aload_0       
        40: iconst_1      
        41: putfield      #519                // Field enableOverride:Z
        44: aload_0       
        45: aconst_null   
        46: putfield      #524                // Field debugInfoStack:Ljava/io/ObjectOutputStream$DebugTraceInfoStack;
        49: return        
      StackMapTable: number_of_entries = 1
           frame_type = 255 /* full_frame */
          offset_delta = 24
          locals = [ class java/io/ObjectOutputStream, class java/lang/SecurityManager ]
          stack = []

      LineNumberTable:
        line 270: 0
        line 182: 4
        line 271: 9
        line 272: 13
        line 273: 17
        line 275: 24
        line 276: 29
        line 277: 34
        line 278: 39
        line 279: 44
        line 280: 49
    Exceptions:
      throws java.io.IOException, java.lang.SecurityException

  public void useProtocolVersion(int) throws java.io.IOException;
    flags: ACC_PUBLIC
    Code:
      stack=4, locals=2, args_size=2
         0: aload_0       
         1: getfield      #525                // Field handles:Ljava/io/ObjectOutputStream$HandleTable;
         4: invokevirtual #605                // Method java/io/ObjectOutputStream$HandleTable.size:()I
         7: ifeq          20
        10: new           #316                // class java/lang/IllegalStateException
        13: dup           
        14: ldc           #20                 // String stream non-empty
        16: invokespecial #654                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
        19: athrow        
        20: iload_1       
        21: lookupswitch  { // 2
                       1: 48
                       2: 48
                 default: 56
            }
        48: aload_0       
        49: iload_1       
        50: putfield      #518                // Field protocol:I
        53: goto          83
        56: new           #315                // class java/lang/IllegalArgumentException
        59: dup           
        60: new           #327                // class java/lang/StringBuilder
        63: dup           
        64: invokespecial #661                // Method java/lang/StringBuilder."<init>":()V
        67: ldc           #22                 // String unknown version: 
        69: invokevirtual #665                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        72: iload_1       
        73: invokevirtual #663                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
        76: invokevirtual #662                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
        79: invokespecial #653                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
        82: athrow        
        83: return        
      StackMapTable: number_of_entries = 4
           frame_type = 20 /* same */
           frame_type = 27 /* same */
           frame_type = 7 /* same */
           frame_type = 26 /* same */

      LineNumberTable:
        line 303: 0
        line 305: 10
        line 307: 20
        line 310: 48
        line 311: 53
        line 314: 56
        line 317: 83
    Exceptions:
      throws java.io.IOException

  public final void writeObject(java.lang.Object) throws java.io.IOException;
    flags: ACC_PUBLIC, ACC_FINAL
    Code:
      stack=3, locals=3, args_size=2
         0: aload_0       
         1: getfield      #519                // Field enableOverride:Z
         4: ifeq          13
         7: aload_0       
         8: aload_1       
         9: invokevirtual #563                // Method writeObjectOverride:(Ljava/lang/Object;)V
        12: return        
        13: aload_0       
        14: aload_1       
        15: iconst_0      
        16: invokespecial #564                // Method writeObject0:(Ljava/lang/Object;Z)V
        19: goto          37
        22: astore_2      
        23: aload_0       
        24: getfield      #517                // Field depth:I
        27: ifne          35
        30: aload_0       
        31: aload_2       
        32: invokespecial #554                // Method writeFatalException:(Ljava/io/IOException;)V
        35: aload_2       
        36: athrow        
        37: return        
      Exception table:
         from    to  target type
            13    19    22   Class java/io/IOException
      StackMapTable: number_of_entries = 4
           frame_type = 13 /* same */
           frame_type = 72 /* same_locals_1_stack_item */
          stack = [ class java/io/IOException ]
           frame_type = 252 /* append */
             offset_delta = 12
        locals = [ class java/io/IOException ]
           frame_type = 250 /* chop */
          offset_delta = 1

      LineNumberTable:
        line 341: 0
        line 342: 7
        line 343: 12
        line 346: 13
        line 352: 19
        line 347: 22
        line 348: 23
        line 349: 30
        line 351: 35
        line 353: 37
    Exceptions:
      throws java.io.IOException

  protected void writeObjectOverride(java.lang.Object) throws java.io.IOException;
    flags: ACC_PROTECTED
    Code:
      stack=0, locals=2, args_size=2
         0: return        
      LineNumberTable:
        line 370: 0
    Exceptions:
      throws java.io.IOException

  public void writeUnshared(java.lang.Object) throws java.io.IOException;
    flags: ACC_PUBLIC
    Code:
      stack=3, locals=3, args_size=2
         0: aload_0       
         1: aload_1       
         2: iconst_1      
         3: invokespecial #564                // Method writeObject0:(Ljava/lang/Object;Z)V
         6: goto          24
         9: astore_2      
        10: aload_0       
        11: getfield      #517                // Field depth:I
        14: ifne          22
        17: aload_0       
        18: aload_2       
        19: invokespecial #554                // Method writeFatalException:(Ljava/io/IOException;)V
        22: aload_2       
        23: athrow        
        24: return        
      Exception table:
         from    to  target type
             0     6     9   Class java/io/IOException
      StackMapTable: number_of_entries = 3
           frame_type = 73 /* same_locals_1_stack_item */
          stack = [ class java/io/IOException ]
           frame_type = 252 /* append */
             offset_delta = 12
        locals = [ class java/io/IOException ]
           frame_type = 250 /* chop */
          offset_delta = 1

      LineNumberTable:
        line 413: 0
        line 419: 6
        line 414: 9
        line 415: 10
        line 416: 17
        line 418: 22
        line 420: 24
    Exceptions:
      throws java.io.IOException

  public void defaultWriteObject() throws java.io.IOException;
    flags: ACC_PUBLIC
    Code:
      stack=3, locals=3, args_size=1
         0: aload_0       
         1: getfield      #528                // Field curContext:Ljava/io/SerialCallbackContext;
         4: ifnonnull     17
         7: new           #288                // class java/io/NotActiveException
        10: dup           
        11: ldc           #16                 // String not in call to writeObject
        13: invokespecial #543                // Method java/io/NotActiveException."<init>":(Ljava/lang/String;)V
        16: athrow        
        17: aload_0       
        18: getfield      #528                // Field curContext:Ljava/io/SerialCallbackContext;
        21: invokevirtual #643                // Method java/io/SerialCallbackContext.getObj:()Ljava/lang/Object;
        24: astore_1      
        25: aload_0       
        26: getfield      #528                // Field curContext:Ljava/io/SerialCallbackContext;
        29: invokevirtual #642                // Method java/io/SerialCallbackContext.getDesc:()Ljava/io/ObjectStreamClass;
        32: astore_2      
        33: aload_0       
        34: getfield      #523                // Field bout:Ljava/io/ObjectOutputStream$BlockDataOutputStream;
        37: iconst_0      
        38: invokevirtual #585                // Method java/io/ObjectOutputStream$BlockDataOutputStream.setBlockDataMode:(Z)Z
        41: pop           
        42: aload_0       
        43: aload_1       
        44: aload_2       
        45: invokespecial #567                // Method defaultWriteFields:(Ljava/lang/Object;Ljava/io/ObjectStreamClass;)V
        48: aload_0       
        49: getfield      #523                // Field bout:Ljava/io/ObjectOutputStream$BlockDataOutputStream;
        52: iconst_1      
        53: invokevirtual #585                // Method java/io/ObjectOutputStream$BlockDataOutputStream.setBlockDataMode:(Z)Z
        56: pop           
        57: return        
      StackMapTable: number_of_entries = 1
           frame_type = 17 /* same */

      LineNumberTable:
        line 432: 0
        line 433: 7
        line 435: 17
        line 436: 25
        line 437: 33
        line 438: 42
        line 439: 48
        line 440: 57
    Exceptions:
      throws java.io.IOException

  public java.io.ObjectOutputStream$PutField putFields() throws java.io.IOException;
    flags: ACC_PUBLIC
    Code:
      stack=5, locals=3, args_size=1
         0: aload_0       
         1: getfield      #526                // Field curPut:Ljava/io/ObjectOutputStream$PutFieldImpl;
         4: ifnonnull     53
         7: aload_0       
         8: getfield      #528                // Field curContext:Ljava/io/SerialCallbackContext;
        11: ifnonnull     24
        14: new           #288                // class java/io/NotActiveException
        17: dup           
        18: ldc           #16                 // String not in call to writeObject
        20: invokespecial #543                // Method java/io/NotActiveException."<init>":(Ljava/lang/String;)V
        23: athrow        
        24: aload_0       
        25: getfield      #528                // Field curContext:Ljava/io/SerialCallbackContext;
        28: invokevirtual #643                // Method java/io/SerialCallbackContext.getObj:()Ljava/lang/Object;
        31: astore_1      
        32: aload_0       
        33: getfield      #528                // Field curContext:Ljava/io/SerialCallbackContext;
        36: invokevirtual #642                // Method java/io/SerialCallbackContext.getDesc:()Ljava/io/ObjectStreamClass;
        39: astore_2      
        40: aload_0       
        41: new           #298                // class java/io/ObjectOutputStream$PutFieldImpl
        44: dup           
        45: aload_0       
        46: aload_2       
        47: invokespecial #611                // Method java/io/ObjectOutputStream$PutFieldImpl."<init>":(Ljava/io/ObjectOutputStream;Ljava/io/ObjectStreamClass;)V
        50: putfield      #526                // Field curPut:Ljava/io/ObjectOutputStream$PutFieldImpl;
        53: aload_0       
        54: getfield      #526                // Field curPut:Ljava/io/ObjectOutputStream$PutFieldImpl;
        57: areturn       
      StackMapTable: number_of_entries = 2
           frame_type = 24 /* same */
           frame_type = 28 /* same */

      LineNumberTable:
        line 453: 0
        line 454: 7
        line 455: 14
        line 457: 24
        line 458: 32
        line 459: 40
        line 461: 53
    Exceptions:
      throws java.io.IOException

  public void writeFields() throws java.io.IOException;
    flags: ACC_PUBLIC
    Code:
      stack=3, locals=1, args_size=1
         0: aload_0       
         1: getfield      #526                // Field curPut:Ljava/io/ObjectOutputStream$PutFieldImpl;
         4: ifnonnull     17
         7: new           #288                // class java/io/NotActiveException
        10: dup           
        11: ldc           #15                 // String no current PutField object
        13: invokespecial #543                // Method java/io/NotActiveException."<init>":(Ljava/lang/String;)V
        16: athrow        
        17: aload_0       
        18: getfield      #523                // Field bout:Ljava/io/ObjectOutputStream$BlockDataOutputStream;
        21: iconst_0      
        22: invokevirtual #585                // Method java/io/ObjectOutputStream$BlockDataOutputStream.setBlockDataMode:(Z)Z
        25: pop           
        26: aload_0       
        27: getfield      #526                // Field curPut:Ljava/io/ObjectOutputStream$PutFieldImpl;
        30: invokevirtual #610                // Method java/io/ObjectOutputStream$PutFieldImpl.writeFields:()V
        33: aload_0       
        34: getfield      #523                // Field bout:Ljava/io/ObjectOutputStream$BlockDataOutputStream;
        37: iconst_1      
        38: invokevirtual #585                // Method java/io/ObjectOutputStream$BlockDataOutputStream.setBlockDataMode:(Z)Z
        41: pop           
        42: return        
      StackMapTable: number_of_entries = 1
           frame_type = 17 /* same */

      LineNumberTable:
        line 474: 0
        line 475: 7
        line 477: 17
        line 478: 26
        line 479: 33
        line 480: 42
    Exceptions:
      throws java.io.IOException

  public void reset() throws java.io.IOException;
    flags: ACC_PUBLIC
    Code:
      stack=3, locals=1, args_size=1
         0: aload_0       
         1: getfield      #517                // Field depth:I
         4: ifeq          17
         7: new           #287                // class java/io/IOException
        10: dup           
        11: ldc           #19                 // String stream active
        13: invokespecial #542                // Method java/io/IOException."<init>":(Ljava/lang/String;)V
        16: athrow        
        17: aload_0       
        18: getfield      #523                // Field bout:Ljava/io/ObjectOutputStream$BlockDataOutputStream;
        21: iconst_0      
        22: invokevirtual #585                // Method java/io/ObjectOutputStream$BlockDataOutputStream.setBlockDataMode:(Z)Z
        25: pop           
        26: aload_0       
        27: getfield      #523                // Field bout:Ljava/io/ObjectOutputStream$BlockDataOutputStream;
        30: bipush        121
        32: invokevirtual #579                // Method java/io/ObjectOutputStream$BlockDataOutputStream.writeByte:(I)V
        35: aload_0       
        36: invokespecial #545                // Method clear:()V
        39: aload_0       
        40: getfield      #523                // Field bout:Ljava/io/ObjectOutputStream$BlockDataOutputStream;
        43: iconst_1      
        44: invokevirtual #585                // Method java/io/ObjectOutputStream$BlockDataOutputStream.setBlockDataMode:(Z)Z
        47: pop           
        48: return        
      StackMapTable: number_of_entries = 1
           frame_type = 17 /* same */

      LineNumberTable:
        line 493: 0
        line 494: 7
        line 496: 17
        line 497: 26
        line 498: 35
        line 499: 39
        line 500: 48
    Exceptions:
      throws java.io.IOException

  protected void annotateClass(java.lang.Class<?>) throws java.io.IOException;
    flags: ACC_PROTECTED
    Code:
      stack=0, locals=2, args_size=2
         0: return        
      LineNumberTable:
        line 519: 0
    Exceptions:
      throws java.io.IOException
    Signature: #360                         // (Ljava/lang/Class<*>;)V

  protected void annotateProxyClass(java.lang.Class<?>) throws java.io.IOException;
    flags: ACC_PROTECTED
    Code:
      stack=0, locals=2, args_size=2
         0: return        
      LineNumberTable:
        line 543: 0
    Exceptions:
      throws java.io.IOException
    Signature: #360                         // (Ljava/lang/Class<*>;)V

  protected java.lang.Object replaceObject(java.lang.Object) throws java.io.IOException;
    flags: ACC_PROTECTED
    Code:
      stack=1, locals=2, args_size=2
         0: aload_1       
         1: areturn       
      LineNumberTable:
        line 584: 0
    Exceptions:
      throws java.io.IOException

  protected boolean enableReplaceObject(boolean) throws java.lang.SecurityException;
    flags: ACC_PROTECTED
    Code:
      stack=2, locals=3, args_size=2
         0: iload_1       
         1: aload_0       
         2: getfield      #520                // Field enableReplace:Z
         5: if_icmpne     10
         8: iload_1       
         9: ireturn       
        10: iload_1       
        11: ifeq          29
        14: invokestatic  #666                // Method java/lang/System.getSecurityManager:()Ljava/lang/SecurityManager;
        17: astore_2      
        18: aload_2       
        19: ifnull        29
        22: aload_2       
        23: getstatic     #530                // Field SUBSTITUTION_PERMISSION:Ljava/io/SerializablePermission;
        26: invokevirtual #660                // Method java/lang/SecurityManager.checkPermission:(Ljava/security/Permission;)V
        29: aload_0       
        30: iload_1       
        31: putfield      #520                // Field enableReplace:Z
        34: aload_0       
        35: getfield      #520                // Field enableReplace:Z
        38: ifne          45
        41: iconst_1      
        42: goto          46
        45: iconst_0      
        46: ireturn       
      StackMapTable: number_of_entries = 4
           frame_type = 10 /* same */
           frame_type = 18 /* same */
           frame_type = 15 /* same */
           frame_type = 64 /* same_locals_1_stack_item */
          stack = [ int ]

      LineNumberTable:
        line 610: 0
        line 611: 8
        line 613: 10
        line 614: 14
        line 615: 18
        line 616: 22
        line 619: 29
        line 620: 34
    Exceptions:
      throws java.lang.SecurityException

  protected void writeStreamHeader() throws java.io.IOException;
    flags: ACC_PROTECTED
    Code:
      stack=2, locals=1, args_size=1
         0: aload_0       
         1: getfield      #523                // Field bout:Ljava/io/ObjectOutputStream$BlockDataOutputStream;
         4: sipush        -21267
         7: invokevirtual #582                // Method java/io/ObjectOutputStream$BlockDataOutputStream.writeShort:(I)V
        10: aload_0       
        11: getfield      #523                // Field bout:Ljava/io/ObjectOutputStream$BlockDataOutputStream;
        14: iconst_5      
        15: invokevirtual #582                // Method java/io/ObjectOutputStream$BlockDataOutputStream.writeShort:(I)V
        18: return        
      LineNumberTable:
        line 632: 0
        line 633: 10
        line 634: 18
    Exceptions:
      throws java.io.IOException

  protected void writeClassDescriptor(java.io.ObjectStreamClass) throws java.io.IOException;
    flags: ACC_PROTECTED
    Code:
      stack=2, locals=2, args_size=2
         0: aload_1       
         1: aload_0       
         2: invokevirtual #624                // Method java/io/ObjectStreamClass.writeNonProxy:(Ljava/io/ObjectOutputStream;)V
         5: return        
      LineNumberTable:
        line 664: 0
        line 665: 5
    Exceptions:
      throws java.io.IOException

  public void write(int) throws java.io.IOException;
    flags: ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0       
         1: getfield      #523                // Field bout:Ljava/io/ObjectOutputStream$BlockDataOutputStream;
         4: iload_1       
         5: invokevirtual #578                // Method java/io/ObjectOutputStream$BlockDataOutputStream.write:(I)V
         8: return        
      LineNumberTable:
        line 675: 0
        line 676: 8
    Exceptions:
      throws java.io.IOException

  public void write(byte[]) throws java.io.IOException;
    flags: ACC_PUBLIC
    Code:
      stack=5, locals=2, args_size=2
         0: aload_0       
         1: getfield      #523                // Field bout:Ljava/io/ObjectOutputStream$BlockDataOutputStream;
         4: aload_1       
         5: iconst_0      
         6: aload_1       
         7: arraylength   
         8: iconst_0      
         9: invokevirtual #586                // Method java/io/ObjectOutputStream$BlockDataOutputStream.write:([BIIZ)V
        12: return        
      LineNumberTable:
        line 686: 0
        line 687: 12
    Exceptions:
      throws java.io.IOException

  public void write(byte[], int, int) throws java.io.IOException;
    flags: ACC_PUBLIC
    Code:
      stack=5, locals=5, args_size=4
         0: aload_1       
         1: ifnonnull     12
         4: new           #321                // class java/lang/NullPointerException
         7: dup           
         8: invokespecial #657                // Method java/lang/NullPointerException."<init>":()V
        11: athrow        
        12: iload_2       
        13: iload_3       
        14: iadd          
        15: istore        4
        17: iload_2       
        18: iflt          37
        21: iload_3       
        22: iflt          37
        25: iload         4
        27: aload_1       
        28: arraylength   
        29: if_icmpgt     37
        32: iload         4
        34: ifge          45
        37: new           #317                // class java/lang/IndexOutOfBoundsException
        40: dup           
        41: invokespecial #655                // Method java/lang/IndexOutOfBoundsException."<init>":()V
        44: athrow        
        45: aload_0       
        46: getfield      #523                // Field bout:Ljava/io/ObjectOutputStream$BlockDataOutputStream;
        49: aload_1       
        50: iload_2       
        51: iload_3       
        52: iconst_0      
        53: invokevirtual #586                // Method java/io/ObjectOutputStream$BlockDataOutputStream.write:([BIIZ)V
        56: return        
      StackMapTable: number_of_entries = 3
           frame_type = 12 /* same */
           frame_type = 252 /* append */
             offset_delta = 24
        locals = [ int ]
           frame_type = 7 /* same */

      LineNumberTable:
        line 698: 0
        line 699: 4
        line 701: 12
        line 702: 17
        line 703: 37
        line 705: 45
        line 706: 56
    Exceptions:
      throws java.io.IOException

  public void flush() throws java.io.IOException;
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0       
         1: getfield      #523                // Field bout:Ljava/io/ObjectOutputStream$BlockDataOutputStream;
         4: invokevirtual #575                // Method java/io/ObjectOutputStream$BlockDataOutputStream.flush:()V
         7: return        
      LineNumberTable:
        line 715: 0
        line 716: 7
    Exceptions:
      throws java.io.IOException

  protected void drain() throws java.io.IOException;
    flags: ACC_PROTECTED
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0       
         1: getfield      #523                // Field bout:Ljava/io/ObjectOutputStream$BlockDataOutputStream;
         4: invokevirtual #574                // Method java/io/ObjectOutputStream$BlockDataOutputStream.drain:()V
         7: return        
      LineNumberTable:
        line 726: 0
        line 727: 7
    Exceptions:
      throws java.io.IOException

  public void close() throws java.io.IOException;
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0       
         1: invokevirtual #546                // Method flush:()V
         4: aload_0       
         5: invokespecial #545                // Method clear:()V
         8: aload_0       
         9: getfield      #523                // Field bout:Ljava/io/ObjectOutputStream$BlockDataOutputStream;
        12: invokevirtual #573                // Method java/io/ObjectOutputStream$BlockDataOutputStream.close:()V
        15: return        
      LineNumberTable:
        line 736: 0
        line 737: 4
        line 738: 8
        line 739: 15
    Exceptions:
      throws java.io.IOException

  public void writeBoolean(boolean) throws java.io.IOException;
    flags: ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0       
         1: getfield      #523                // Field bout:Ljava/io/ObjectOutputStream$BlockDataOutputStream;
         4: iload_1       
         5: invokevirtual #584                // Method java/io/ObjectOutputStream$BlockDataOutputStream.writeBoolean:(Z)V
         8: return        
      LineNumberTable:
        line 749: 0
        line 750: 8
    Exceptions:
      throws java.io.IOException

  public void writeByte(int) throws java.io.IOException;
    flags: ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0       
         1: getfield      #523                // Field bout:Ljava/io/ObjectOutputStream$BlockDataOutputStream;
         4: iload_1       
         5: invokevirtual #579                // Method java/io/ObjectOutputStream$BlockDataOutputStream.writeByte:(I)V
         8: return        
      LineNumberTable:
        line 760: 0
        line 761: 8
    Exceptions:
      throws java.io.IOException

  public void writeShort(int) throws java.io.IOException;
    flags: ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0       
         1: getfield      #523                // Field bout:Ljava/io/ObjectOutputStream$BlockDataOutputStream;
         4: iload_1       
         5: invokevirtual #582                // Method java/io/ObjectOutputStream$BlockDataOutputStream.writeShort:(I)V
         8: return        
      LineNumberTable:
        line 771: 0
        line 772: 8
    Exceptions:
      throws java.io.IOException

  public void writeChar(int) throws java.io.IOException;
    flags: ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0       
         1: getfield      #523                // Field bout:Ljava/io/ObjectOutputStream$BlockDataOutputStream;
         4: iload_1       
         5: invokevirtual #580                // Method java/io/ObjectOutputStream$BlockDataOutputStream.writeChar:(I)V
         8: return        
      LineNumberTable:
        line 782: 0
        line 783: 8
    Exceptions:
      throws java.io.IOException

  public void writeInt(int) throws java.io.IOException;
    flags: ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0       
         1: getfield      #523                // Field bout:Ljava/io/ObjectOutputStream$BlockDataOutputStream;
         4: iload_1       
         5: invokevirtual #581                // Method java/io/ObjectOutputStream$BlockDataOutputStream.writeInt:(I)V
         8: return        
      LineNumberTable:
        line 793: 0
        line 794: 8
    Exceptions:
      throws java.io.IOException

  public void writeLong(long) throws java.io.IOException;
    flags: ACC_PUBLIC
    Code:
      stack=3, locals=3, args_size=2
         0: aload_0       
         1: getfield      #523                // Field bout:Ljava/io/ObjectOutputStream$BlockDataOutputStream;
         4: lload_1       
         5: invokevirtual #583                // Method java/io/ObjectOutputStream$BlockDataOutputStream.writeLong:(J)V
         8: return        
      LineNumberTable:
        line 804: 0
        line 805: 8
    Exceptions:
      throws java.io.IOException

  public void writeFloat(float) throws java.io.IOException;
    flags: ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0       
         1: getfield      #523                // Field bout:Ljava/io/ObjectOutputStream$BlockDataOutputStream;
         4: fload_1       
         5: invokevirtual #577                // Method java/io/ObjectOutputStream$BlockDataOutputStream.writeFloat:(F)V
         8: return        
      LineNumberTable:
        line 815: 0
        line 816: 8
    Exceptions:
      throws java.io.IOException

  public void writeDouble(double) throws java.io.IOException;
    flags: ACC_PUBLIC
    Code:
      stack=3, locals=3, args_size=2
         0: aload_0       
         1: getfield      #523                // Field bout:Ljava/io/ObjectOutputStream$BlockDataOutputStream;
         4: dload_1       
         5: invokevirtual #576                // Method java/io/ObjectOutputStream$BlockDataOutputStream.writeDouble:(D)V
         8: return        
      LineNumberTable:
        line 826: 0
        line 827: 8
    Exceptions:
      throws java.io.IOException

  public void writeBytes(java.lang.String) throws java.io.IOException;
    flags: ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0       
         1: getfield      #523                // Field bout:Ljava/io/ObjectOutputStream$BlockDataOutputStream;
         4: aload_1       
         5: invokevirtual #596                // Method java/io/ObjectOutputStream$BlockDataOutputStream.writeBytes:(Ljava/lang/String;)V
         8: return        
      LineNumberTable:
        line 837: 0
        line 838: 8
    Exceptions:
      throws java.io.IOException

  public void writeChars(java.lang.String) throws java.io.IOException;
    flags: ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0       
         1: getfield      #523                // Field bout:Ljava/io/ObjectOutputStream$BlockDataOutputStream;
         4: aload_1       
         5: invokevirtual #597                // Method java/io/ObjectOutputStream$BlockDataOutputStream.writeChars:(Ljava/lang/String;)V
         8: return        
      LineNumberTable:
        line 848: 0
        line 849: 8
    Exceptions:
      throws java.io.IOException

  public void writeUTF(java.lang.String) throws java.io.IOException;
    flags: ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0       
         1: getfield      #523                // Field bout:Ljava/io/ObjectOutputStream$BlockDataOutputStream;
         4: aload_1       
         5: invokevirtual #598                // Method java/io/ObjectOutputStream$BlockDataOutputStream.writeUTF:(Ljava/lang/String;)V
         8: return        
      LineNumberTable:
        line 865: 0
        line 866: 8
    Exceptions:
      throws java.io.IOException

  int getProtocolVersion();
    flags: 
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0       
         1: getfield      #518                // Field protocol:I
         4: ireturn       
      LineNumberTable:
        line 1012: 0

  void writeTypeString(java.lang.String) throws java.io.IOException;
    flags: 
    Code:
      stack=3, locals=3, args_size=2
         0: aload_1       
         1: ifnonnull     11
         4: aload_0       
         5: invokespecial #548                // Method writeNull:()V
         8: goto          39
        11: aload_0       
        12: getfield      #525                // Field handles:Ljava/io/ObjectOutputStream$HandleTable;
        15: aload_1       
        16: invokevirtual #609                // Method java/io/ObjectOutputStream$HandleTable.lookup:(Ljava/lang/Object;)I
        19: dup           
        20: istore_2      
        21: iconst_m1     
        22: if_icmpeq     33
        25: aload_0       
        26: iload_2       
        27: invokespecial #550                // Method writeHandle:(I)V
        30: goto          39
        33: aload_0       
        34: aload_1       
        35: iconst_0      
        36: invokespecial #565                // Method writeString:(Ljava/lang/String;Z)V
        39: return        
      StackMapTable: number_of_entries = 3
           frame_type = 11 /* same */
           frame_type = 252 /* append */
             offset_delta = 21
        locals = [ int ]
           frame_type = 250 /* chop */
          offset_delta = 5

      LineNumberTable:
        line 1021: 0
        line 1022: 4
        line 1023: 11
        line 1024: 25
        line 1026: 33
        line 1028: 39
    Exceptions:
      throws java.io.IOException

  static java.io.ObjectOutputStream$BlockDataOutputStream access$000(java.io.ObjectOutputStream);
    flags: ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0       
         1: getfield      #523                // Field bout:Ljava/io/ObjectOutputStream$BlockDataOutputStream;
         4: areturn       
      LineNumberTable:
        line 161: 0

  static boolean access$100();
    flags: ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=1, locals=0, args_size=0
         0: getstatic     #521                // Field extendedDebugInfo:Z
         3: ireturn       
      LineNumberTable:
        line 161: 0

  static java.io.ObjectOutputStream$DebugTraceInfoStack access$200(java.io.ObjectOutputStream);
    flags: ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0       
         1: getfield      #524                // Field debugInfoStack:Ljava/io/ObjectOutputStream$DebugTraceInfoStack;
         4: areturn       
      LineNumberTable:
        line 161: 0

  static void access$300(java.io.ObjectOutputStream, java.lang.Object, boolean) throws java.io.IOException;
    flags: ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=3, locals=3, args_size=3
         0: aload_0       
         1: aload_1       
         2: iload_2       
         3: invokespecial #564                // Method writeObject0:(Ljava/lang/Object;Z)V
         6: return        
      LineNumberTable:
        line 161: 0
    Exceptions:
      throws java.io.IOException

  static void access$400(float[], int, byte[], int, int);
    flags: ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=5, locals=5, args_size=5
         0: aload_0       
         1: iload_1       
         2: aload_2       
         3: iload_3       
         4: iload         4
         6: invokestatic  #552                // Method floatsToBytes:([FI[BII)V
         9: return        
      LineNumberTable:
        line 161: 0

  static void access$500(double[], int, byte[], int, int);
    flags: ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=5, locals=5, args_size=5
         0: aload_0       
         1: iload_1       
         2: aload_2       
         3: iload_3       
         4: iload         4
         6: invokestatic  #551                // Method doublesToBytes:([DI[BII)V
         9: return        
      LineNumberTable:
        line 161: 0

  static {};
    flags: ACC_STATIC
    Code:
      stack=3, locals=0, args_size=0
         0: new           #332                // class sun/security/action/GetBooleanAction
         3: dup           
         4: ldc           #21                 // String sun.io.serialization.extendedDebugInfo
         6: invokespecial #668                // Method sun/security/action/GetBooleanAction."<init>":(Ljava/lang/String;)V
         9: invokestatic  #667                // Method java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
        12: checkcast     #308                // class java/lang/Boolean
        15: invokevirtual #645                // Method java/lang/Boolean.booleanValue:()Z
        18: putstatic     #521                // Field extendedDebugInfo:Z
        21: return        
      LineNumberTable:
        line 211: 0
}
